---
description: 
globs: 
alwaysApply: true
---
# Scratchpad

## Background and Motivation
The current Pendle agent embeds a local wallet (derived from `MNEMONIC`) and **directly signs & sends** on-chain transactions via QuickNode.  
This tight coupling:
1. Forces infrastructure requirements on deployers (must provide mnemonic & fund the wallet).  
2. Presents custody/security concerns.  
3. Makes the agent behaviour inconsistent with the newer *liquidity agent* which **produces transaction plans only ("no-wallet" mode)** and lets the caller sign.  
4. Pendle agent currently exposes its SSE tool as `chat`; we need to rename it to `instruction` for consistency with other agents.

We want to **refactor the Pendle agent to adopt the same no-wallet pattern** so that all agents expose uniform, signer-agnostic interfaces.

---

## Key Challenges and Analysis
1. **Wallet-specific logic is spread across multiple files** (`agent.ts`, `agentToolHandlers.ts`, `index.ts`).  
2. **`executeAction` & `signAndSendTransaction`** embed LocalAccount, chain resolution and QuickNode RPC logic. These must be removed or stubbed.
3. **Tool handler (`handleSwapTokens`) currently expects `executeAction` side-effects.** We need a new return style similar to `LiquidityTransactionArtifact`.
4. **Initialization presently requires `MNEMONIC`;** the startup script must change to accept only QuickNode creds.
5. **Type definitions (`TransactionPlan`) reused;** ensure compile passes after removing wallet types.
6. **API contract changes** – server responses will now include artifacts rather than execution receipts. Down-stream consumers must be unaffected or updated.
7. **TransactionPlan type note** – Upstream SDK no longer exports `TransactionPlan`; **Pendle agent keeps its own `TransactionPlan` Zod schema** and MCP responses include a `transactions` array of this type.

---

## High-level Task Breakdown
- [x] **T1** – Study liquidity agent *no-wallet* flow and record artifact/Task shapes.  
  Success: Understand how `handleSupplyLiquidity` builds `LiquidityTransactionArtifact` and Task output.

- [x] **T2** – Isolate wallet-dependent code in Pendle agent:
  • import of `LocalAccount` and `createWalletClient` from `viem`: ```1:12:typescript/examples/pendle-agent/src/agent.ts```
  • `private account: LocalAccount<string>` field: ```146:146:typescript/examples/pendle-agent/src/agent.ts```
  • `constructor(account: LocalAccount<string>, ...)`: ```164:168:typescript/examples/pendle-agent/src/agent.ts```
  • `executeAction` method: ```533:548:typescript/examples/pendle-agent/src/agent.ts```
  • `signAndSendTransaction` method: ```549:613:typescript/examples/pendle-agent/src/agent.ts```
  • `mnemonicToAccount` usage deriving wallet: ```5:13:typescript/examples/pendle-agent/src/index.ts```
  Success: Annotated code locations & planned deletions.

- [x] **T3** – Refactor `agent.ts`:  
  • Remove `LocalAccount` type and `account` param from constructor.  
  • Delete `signAndSendTransaction` & `executeAction` entirely (transactions stay untouched).  
  • No need to introduce our own `TransactionPlan` type; reuse the raw transaction objects the MCP already returns.  
  • Ensure handlers simply forward those objects inside artifacts (mimicking liquidity agent) without on-chain sending.
  Success: File compiles without wallet deps.

- [x] **T4** – Refactor `agentToolHandlers.ts` (Pendle):  
  • Remove `validateAndExecuteAction`; instead, `handleSwapTokens` should directly build an artifact containing the MCP-returned transactions array and chainId (similar to `LiquidityTransactionArtifact`).  
  • Ensure no signing occurs inside the handler.  
  Success: Handler returns Task/artifact matching new pattern.

- [x] **T5** – Update `index.ts` server bootstrap:  
  • Remove mnemonic/account derivation.  
  • Accept `quicknodeSubdomain` & `apiKey` only.  
  • Ensure tool schema still requires `userAddress` param for signing externally.  
  • Rename exposed MCP tool from `chat` to `instruction` to align with liquidity agent.  
  Success: Server starts with `.env` missing MNEMONIC and new tool name.

- [x] **T6** – Clean up imports, env docs & README.  
  Success: `pnpm lint` passes.

- [ ] **T7** – Manual integration test: call `chat` tool with swap instruction and confirm JSON artifact output (no on-chain submission).

---

## Project Status Board
- [x] T1 – Study liquidity agent flow
- [x] T2 – Identify wallet code locations
- [x] T3 – Refactor agent.ts (no wallet)
- [x] T4 – Refactor handlers
- [x] T5 – Update server bootstrap
- [x] T6 – Cleanup & lint
- [ ] T7 – Manual test & verification

---

## Executor's Feedback or Assistance Requests
- Completed T1: located `handleSupplyLiquidity` in `examples/liquidity-agent-no-wallet/src/agentToolHandlers.ts` (lines ~339-450) and understood `LiquidityTransactionArtifact` shape (fields: `txPreview` and `txPlan`). Ready for Planner review.
- Completed T2: wallet-dependent code locations identified above. Ready for Planner review to approve T3.
- Completed T3: Removed wallet imports, fields, and on-chain methods from `agent.ts`, and stubbed `executeAction` for no-wallet mode. Ready for T4 refactor of handlers.
- Completed T4: Refactored `agentToolHandlers.ts` to remove execute calls and return a `Task` with a `swap-transaction` artifact containing the transaction plan. Ready for T5.
- Completed T5: Updated `index.ts` to remove mnemonic logic, accept QuickNode credentials only, renamed tool to `instruction` with `instruction` and `userAddress` params, and updated the root endpoint listing. Ready for cleanup, lint, and documentation updates (T6).
- Completed T6: Ran Prettier to fix formatting issues and compiled the project to ensure no type errors. Ready for manual integration test (T7).

---

## Lessons
- Always remove unused imports after refactor to appease TypeScript linter.  
- Align Task/artifact schema across agents to avoid diverging consumer expectations.


