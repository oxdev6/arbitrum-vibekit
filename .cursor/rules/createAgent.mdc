---
description: 
globs: 
alwaysApply: false
---
# Guide for Agent Creation

_The purpose of this document is serve as a set of standard best practices for creating an Arbitrum Vibekit AI agent. The Arbitrum Vibekit is a very lightweight framework for easily vibe coding (using AI to create working code) on-chain AI agents in minutes._

## Continuous Learning

- When the user provides an instruction that corrects one of your assumptions or clarifies a preferred best practice for the Arbitrum Vibekit (e.g., by requesting the avoidance of non-standard workarounds or suggesting a more idiomatic approach), always ask the user if this new or clarified best practice should be incorporated into this guide.
- Always actively seek to identify and distill generalizable best practices from user interactions and project requirements that would benefit this guide.

## Development Principles

- **No Hacks:** Always prioritize robust, idiomatic, and maintainable solutions over temporary workarounds or hacks (e.g., avoid stubbing `*.d.ts` files if proper workspace linking or `tsconfig.json` paths can resolve imports).

## Architecture

- An agent must always use MCP tools to interact with external services or perform actions.
- MCP servers may be connected to remotely via SSE/Websocket pointing to a URL, or locally via STDIO pointing to a file within `typescript/lib/mcp-tools/`.
- New MCP tools must be added to or created as an MCP server within `typescript/lib/mcp-tools/`
- An agent is always served as an MCP server itself.

## Packages

- Always use default packages unless directed otherwise.

### Default Packages

- pnpm
  - The `typescript/` directory is a monorepo setup as the root for a pnpm workspace
  - There are two workspace package directories: `typescript/examples/` for fully functional AI agents and `typescript/lib/` for supporting packages that are used to build AI agents.
- **pnpm workspace packages:**
  - Agent2Agent (A2A) (a2a-samples-js)
  - Ember On-chain Actions (ember-mcp-tool-server)
  - All agents within the `typescript/examples/` directory
- Vercel AI SDK (ai)
  - OpenRouter @openrouter/ai-sdk-provider
- Model Context Protocol (MCP) (@modelcontextprotocol/sdk)
- Viem (viem)
- OpenZeppelin (@openzeppelin/contracts)

# Agent Setup & Run Instructions

To run an agent:
1. From the `typescript` folder, run:
   ```
   pnpm install
   pnpm build
   ```
2. Then, to start the agent, run the following inside the agent's directory:
   ```
   pnpm dev
   ```
